@startuml
enum LessonType {
    GROUP
    PRIVATE
}

enum UserType {
    CLIENT
    INSTRUCTOR
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

class "Administrator" <<Singleton>> {
    +requestToDeleteUser(): void
    +specifyUserType(userType: String): void
    +inputId(id: Int): void
    +confirmDeletion(): void
}

class "Client" {
    +id: Int
    +firstName: String
    +lastName: String
    +email: String
    +password: String
    +role: Role
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Client(firstName: String, lastName: String, email: String, password: String)
}

class "Child" {
    +id: Int
    +firstName: String
    +lastName: String
    +dateOfBirth: DateTime
    +parentId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Child(firstName: String, lastName: String, dateOfBirth: DateTime, parentId: Int)
}

class "Location" {
    +id: Int
    +name: String
    +address: String
    +city: String
    +province: String
    +postalCode: String
    --
    +Location(name: String, address: String, city: String, province: String)
}

class "Lesson" {
    +id: Int
    +type: LessonType
    +title: String
    +locationId: Int
    +isAvailable: Boolean
    +startTime: DateTime
    +endTime: DateTime
    +createdAt: DateTime
    +updatedAt: DateTime
    +schedule: List<DayOfWeek>
    --
    +Lesson(type: LessonType, title: String, locationId: Int, startTime: DateTime, endTime: DateTime, schedule: List<DayOfWeek>)
}

class "Booking" {
    +id: Int
    +clientId: Int
    +lessonId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Booking(clientId: Int, lessonId: Int, bookingTime: DateTime, isAvailable: Boolean)
}

class "Instructor" {
    --
    +Instructor(firstName: String, lastName: String, email: String, password: String)
}

class "ClientCollection" {
    +clients: List<Client>
    +getClients(): List<Client>
    +removeClient(id: Int): Boolean
}

class "InstructorCollection" {
    +instructors: List<Instructor>
    +getInstructors(): List<Instructor>
    +removeInstructor(id: Int): Boolean
    +assignInstructorToLesson(lessonId: Int, instructorId: Int): Boolean
}

class "ChildrenCollection" {
    +children: List<Child>
}

class "LocationsCollection" {
    +locations: List<Location>
}

class "LessonsCollection" {
    +lessons: List<Lesson>
    +createLesson(locationId: Int, title: String, lessonType: LessonType, startTime: DateTime, endTime: DateTime, schedule: List<DayOfWeek>): Boolean
    +validateLesson(locationId: Int, startTime: DateTime, endTime: DateTime, schedule: List<DayOfWeek>): Boolean
}

class "BookingsCollection" {
    +bookings: List<Booking>
}

class "Terminal" {
    +connect(): void
    +disconnect(): void
}

Client <|-- Administrator
Client <|-- Instructor

Client "1" --o "0..*" Child : has
Instructor "1" --o "0..*" Lesson : teaches
Location "1" --o "0..*" Lesson : offers
Lesson "1" --o "0..1" Booking : has
Client "1" --o "0..*" Booking : makes

"ClientCollection" *-- "Client" : contains
"InstructorCollection" *-- "Instructor" : contains
"ChildrenCollection" *-- "Child" : contains
"LocationsCollection" *-- "Location" : contains
"LessonsCollection" *-- "Lesson" : contains
"BookingsCollection" *-- "Booking" : contains

"Terminal" -- "1" "ClientCollection" : connects to
"Terminal" -- "1" "InstructorCollection" : connects to
"Terminal" -- "1" "ChildrenCollection" : connects to
"Terminal" -- "1" "LocationsCollection" : connects to
"Terminal" -- "1" "LessonsCollection" : connects to
"Terminal" -- "1" "BookingsCollection" : connects to
@enduml