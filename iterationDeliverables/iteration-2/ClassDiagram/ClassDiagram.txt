@startuml
enum Role {
    INSTRUCTOR
    CLIENT
    ADMINISTRATOR
}

enum LessonType {
    GROUP
    PRIVATE
}

class "Administrator" <<Singleton>> {
}

class "Client" {
    +id: Int
    +firstName: String
    +lastName: String
    +email: String
    +password: String
    +phone: String
    +role: Role
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Client(firstName: String, lastName: String, email: String, password: String, phone: String)
}

class "Child" {
    +id: Int
    +firstName: String
    +lastName: String
    +dateOfBirth: DateTime
    +parentId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Child(firstName: String, lastName: String, dateOfBirth: DateTime, parentId: Int)
}

class "Location" {
    +id: Int
    +name: String
    +address: String
    +city: String
    +province: String
    +postalCode: String
    --
    +Location(name: String, address: String, city: String, province: String)
}

class "Lesson" {
    +id: Int
    +type: LessonType
    +title: String
    +locationId: Int
    +isAvailable: Boolean
    +startTime: DateTime
    +endTime: DateTime
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Lesson(type: LessonType, title: String, locationId: Int, startTime: DateTime, endTime: DateTime)
}

class "Booking" {
    +id: Int
    +clientId: Int
    +lessonId: Int
    +createdAt: DateTime
    +updatedAt: DateTime
    --
    +Booking(clientId: Int, lessonId: Int, bookingTime: DateTime, isAvailable: Boolean)
}

class "Instructor" {
    --
    +Instructor(firstName: String, lastName: String, email: String, password: String, phone: String)
}

Client <|-- Administrator
Client <|-- Instructor

Client "1" --o "0..*" Child : has
Instructor "1" --o "0..*" Lesson : teaches
Location "1" --o "0..*" Lesson : offers
Lesson "1" --o "0..1" Booking : has
Client "1" --o "0..*" Booking : makes

class InstructorDashboardView <<view>> {
    +requestLessons()
    +filterLessons(date, keyword, location, timeRange)
    +selectLesson(lessonId)
    +requestRegister()
    +inputCredentials(firstName, lastName, email, password, phoneNumber)
}

class AdminDashboardView <<view>> {
    +requestUserList()
    +selectUserToDelete(user)
    +confirmDeletion()
    +pressCreateLesson()
    +selectLocation(location)
    +enterLessonDetails(title, lessonType, startTime, endTime)
}

class InstructorController <<controller>> {
    +getLessons()
    +filterLessons(date, keyword, location, timeRange)
    +selectLesson(lessonId)
    +displayRegistrationForm()
    +submitCredentials(firstName, lastName, email, password, phoneNumber)
}

class AdminController <<controller>> {
    +getUserList()
    +deleteUser(user)
    +requestAllLocations()
    +lessonCreationForm()
    +validateLessonDetails(title, lessonType, startTime, endTime)
}

InstructorDashboardView --> InstructorController : uses
AdminDashboardView --> AdminController : uses
@enduml